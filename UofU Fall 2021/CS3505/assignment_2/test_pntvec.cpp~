#include <iostream>
#include "pntvec.h"
#include <sstream>


bool Default_Constructor_Test ();
bool Three_Param_Constructor_Test (double x, double y, double z);
bool Copy_Constructor_Test ();
bool Set_X_Test (double x);
bool Set_Y_Test (double y);
bool Set_Z_Test (double z);
bool Get_X_Test ();
bool Get_Y_Test ();
bool Get_Z_Test ();
bool distance_to_Test ();
bool equal_operator_overload_test ();
bool addition_operator_overload_test ();
bool subtraction_operator_overload_test ();
bool multiplication_operator_overload_test ();
bool negation_operator_overload_test ();
bool output_stream_overload_test();
bool input_stream_overload_test();

int main()
{
  if (!Default_Constructor_Test())
  {
    return -1;
  }

  if (!Three_Param_Constructor_Test(1.0, 2.0, 3.0))
  {
    return -1;
  }

  if (!Copy_Constructor_Test())
  {
    return -1;
  }
  
  if (!Set_X_Test(2))
  {
    return -1;
  }

  if (!Set_Y_Test(3))
  {
    return -1;
  }

  if (!Set_Z_Test(4))
  {
    return -1;
  }

  if (!Get_X_Test())
  {
    return -1;
  }

 if (!Get_Y_Test())
  {
    return -1;
  }

 if (!Get_Z_Test())
  {
    return -1;
  }
 
 if (!distance_to_Test())
 {
   return -1;
 }
 
 if (!equal_operator_overload_test())
 {
   return -1;
 }

 if (!addition_operator_overload_test())
 {
   return -1;
 }

 if (!subtraction_operator_overload_test())
 {
   return -1;
 }

 if (!multiplication_operator_overload_test())
 {
   return -1;
 }

 if (!negation_operator_overload_test())
 {
   return -1;
 }

 if (!output_stream_overload_test())
 {
   return -1;
 }

 if (!input_stream_overload_test())
 {
   return -1;
 }

 std::cout << "No Error" << std::endl;
 return 0;
}


bool Default_Constructor_Test ()
{
  pntvec point;

  if (point.get_x() != 0 || point.get_y() != 0 || point.get_z() != 0)
  { 
    std::cout << "Error in 'Default_Constructor_Test'" << std::endl;
    return false;
  }
  
  return true;
}

bool Three_Param_Constructor_Test (double x, double y, double z)
{
  pntvec point(x, y, z);
  if (point.get_x() != x || point.get_y() != y || point.get_z() != z)
  {
    std::cout << "Error in 'Three_Param_Constructor_Test'" << std::endl;
    return false;
  }
  
  return true;
}

bool Copy_Constructor_Test ()
{
  pntvec point(2, 3, 4);
  pntvec copyPoint(point);
  if (copyPoint.get_x() != point.get_x() || copyPoint.get_y() != point.get_y() || copyPoint.get_z() != point.get_z())
  {
    std::cout << "Error in 'Copy_Constructor_Test'" << std::endl;
    return false;
  }

  return true;
}

bool Set_X_Test (double x)
{
  pntvec point(x, 0, 0);
  if (point.get_x() != x)
  {
    std::cout << "Error in 'Set_X_Test'" << std::endl;
    return false;
  }

  return true;
}

bool Set_Y_Test (double y)
{
  pntvec point (0, y, 0);
  if (point.get_y() != y)
  {
    std::cout << "Error in 'Set_Y_Test'" << std::endl;
    return false;
  }

  return true;
}

bool Set_Z_Test (double z)
{
  pntvec point (0, 0, z);
  if (point.get_z() != z)
  {
    std::cout << "Error in 'Set_Z_Test'" << std::endl;
    return false;
  }

  return true;
}

bool Get_X_Test ()
{
  pntvec point(1, 2, 3);
  if (point.get_x() != 1)
  {
    std::cout << "Error in 'Get_X_Test'" << std::endl;
    return false;
  }

  return true;
}

bool Get_Y_Test ()
{
  pntvec point(1, 2, 3);
  if (point.get_y() != 2)
  {
    std::cout << "Error in 'Get_Y_Test'" << std::endl;
    return false;
  }

  return true;
}

bool Get_Z_Test ()
{
  pntvec point(1, 2, 3);
  if (point.get_z() != 3)
  {
    std::cout << "Error in 'Get_Z_Test'" << std::endl;
    return false;
  }

  return true;
}

bool distance_to_Test ()
{
  pntvec point1 (1, 1, 1);
  pntvec point2 (2, 2, 2);
  
  double MarginOfError = 0.0001;

  long expectedResult = 1.732050807568877293527446341;
  double actualResult = point1.distance_to(point2);

  if (!((expectedResult - actualResult) < MarginOfError))
  {
    std::cout << "Error in 'distance_to_Test'" << std::endl;
    return false;
  }

  return true;
}

bool equal_operator_overload_test ()
{
  pntvec point (2, 3, 4);
  pntvec copyPoint = point;
  
  if (copyPoint.get_x() != point.get_x() || copyPoint.get_y() != point.get_y() || copyPoint.get_z() != point.get_z())
  {
    std::cout << "Error in 'equal_operator_overload_test'" << std::endl;
    return false;
  }

  return true;
}

bool addition_operator_overload_test ()
{
  pntvec point1 (2, 3, 4);
  pntvec point2 (1, 2, 3);
  pntvec sumofPoints = point1 + point2;

  if (sumofPoints.get_x() != 3 || sumofPoints.get_y() != 5 || sumofPoints.get_z() != 7)
  {
    std::cout << "Error in 'addition_operator_overload_test'" << std::endl;
    return false;
  }

  return true;
}

bool subtraction_operator_overload_test ()
{
  pntvec point1 (2, 3, 4);
  pntvec point2 (1, 2, 3);
  pntvec diffofPoints = point1 - point2;

  if (diffofPoints.get_x() != 1 || diffofPoints.get_y() != 1 || diffofPoints.get_z() != 1)
  {
    std::cout << "Error in 'subtraction_operator_overload_test'" << std::endl;
    return false;
  }

  return true;
}

bool multiplication_operator_overload_test ()
{
  pntvec point1 (2, 3, 4);
  double scalar = 5;
  pntvec scaledPoint = point1 * scalar;

  if (scaledPoint.get_x() != 10 || scaledPoint.get_y() != 15 || scaledPoint.get_z() != 20)
  {
    std::cout << "Error in 'multiplication_operator_overload_test'" << std::endl;
    return false;
  }

  return true;
}

bool negation_operator_overload_test ()
{
  pntvec point(1, 2, 3);
  pntvec negatedPoint = -point;

  if (negatedPoint.get_x() != -1 || negatedPoint.get_y() != -2 || negatedPoint.get_z() != -3)
  {
    std::cout << "Error in 'negation_operator_overload_test'" << std::endl;
    return false;
  }

  return true;
}

bool output_stream_overload_test()
{ 
  pntvec point(1, 0, 4);
  
  std::stringstream out;
  out << point;

  if (out.str() != "(1, 0, 4)")
  {
    std::cout << "Error in 'output_stream_overload_test'" << std::endl;
    return false;
  }
  
  return true;
}

bool input_stream_overload_test()
{
  std::stringstream in;
  pntvec point;

  in.str("1.0 2.0 3.0");

  in >> point;

  if (point.get_x() != 1.0 || point.get_y() != 2.0 || point.get_z() != 3.0)
  {
    std::cout << "Error in 'input_stream_overload_test'" << std::endl;
    return false;
  }

  return true;
}
